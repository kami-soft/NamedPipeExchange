unit TestNamedPipes;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  System.SysUtils,
  System.Generics.Collections,
  NamedPipes.Async,
  NamedPipes.Async.Classes,
  NamedPipes.PacketStream,
  System.Classes;

type
  // Test methods for class TNamedPipeClient

  TestTNamedPipeClient = class(TTestCase)
  strict private
    FNamedPipeClient: TNamedPipeClient;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetPipe;
    procedure TestConnect;
    procedure TestWriteMessage;
    procedure TestWriteMessage1;
    procedure TestWriteMessage2;
    procedure TestInit;
    procedure TestInstance;
  end;

implementation

procedure TestTNamedPipeClient.SetUp;
begin
  TNamedPipeClient.Init('.', 'TestPIPE');
  FNamedPipeClient := TNamedPipeClient.Instance;
end;

procedure TestTNamedPipeClient.TearDown;
begin
  FNamedPipeClient.Free;
  FNamedPipeClient := nil;
end;

procedure TestTNamedPipeClient.TestSetPipe;
var
  PipeName: string;
  ServerName: string;
begin
  PipeName := 'TestPIPE1';
  ServerName := '.';
  // TODO: Setup method call parameters
  FNamedPipeClient.SetPipe(ServerName, PipeName);
  // TODO: Validate method results
  CheckEquals(PipeName, FNamedPipeClient.PipeName);
  CheckEquals(ServerName, FNamedPipeClient.ServerName);
end;

procedure TestTNamedPipeClient.TestConnect;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FNamedPipeClient.Connect;
  // TODO: Validate method results
end;

procedure TestTNamedPipeClient.TestWriteMessage;
var
  ReturnValue: Boolean;
  Stream: TStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNamedPipeClient.WriteMessage(Stream);
  // TODO: Validate method results
end;

procedure TestTNamedPipeClient.TestWriteMessage1;
var
  ReturnValue: Boolean;
  Bytes: TArray<System.Byte>;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNamedPipeClient.WriteMessage(Bytes);
  // TODO: Validate method results
end;

procedure TestTNamedPipeClient.TestWriteMessage2;
var
  ReturnValue: Boolean;
  Msg: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNamedPipeClient.WriteMessage(Msg);
  // TODO: Validate method results
end;

procedure TestTNamedPipeClient.TestInit;
var
  DefaultPipeName: string;
  DefaultServerName: string;
begin
  // TODO: Setup method call parameters
  FNamedPipeClient.Init(DefaultServerName, DefaultPipeName);
  // TODO: Validate method results
end;

procedure TestTNamedPipeClient.TestInstance;
var
  ReturnValue: TNamedPipeClient;
begin
  ReturnValue := FNamedPipeClient.Instance;
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTNamedPipeClient.Suite);

end.
